services:
  postgres_db:
    image: postgres:11
    restart: always
    ports:
      - "6000:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data

  api:
    build:
      dockerfile: api/Dockerfile
      context: "./../"
    image: api:latest
    depends_on:
      - postgres_db
    ports:
      - "5000:5000"
    environment:
      DB_HOST: postgres_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_PORT: ${DB_PORT}
      PORT: ${PORT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      LOG_LEVEL: ${LOG_LEVEL}

  python-backend:
    build:
      context: ./../backend
      dockerfile: Dockerfile
    container_name: python-backend
    environment:
      PORT: 8000
      PYTHONPATH: /app
      DB_HOST: postgres_db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      DB_SCHEMA: ${DB_SCHEMA}
      DB_PORT: ${DB_PORT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    ports:
      - "8300:8000"
    restart: unless-stopped
    depends_on:
      postgres_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  react-web:
    build:
      context: ./../web
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:5000}
    container_name: web
    # depends_on:
    #   - backend
    volumes:
      - ./src:/app/src
    env_file:
      - ../web/.env
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:5000}
    ports:
      - "3000:80"
    restart: unless-stopped

  # keycloak:
  #   image: quay.io/keycloak/keycloak:24.0.3
  #   command: start-dev
  #   environment:
  #     KEYCLOAK_ADMIN: admin
  #     KEYCLOAK_ADMIN_PASSWORD: admin
  #   ports:
  #     - "8080:8080"
  #   restart: unless-stopped
volumes:
  pgdata:
